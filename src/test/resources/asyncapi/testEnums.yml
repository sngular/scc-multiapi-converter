asyncapi: "2.3.0"
info:
  title: Order Service
  version: 1.0.0
  description: Order management Service
  contact:
    name: Sngular
    url: http://www.asyncapi.org/support
    email: os3@sngular.com
  license:
    name: MIT
servers:
  development:
    url: development.gigantic-server.com
    description: Development server
    protocol: kafka
    protocolVersion: 0.9.1
  staging:
    url: staging.gigantic-server.com
    description: Staging server
    protocol: kafka
    protocolVersion: 0.9.1
  production:
    url: api.gigantic-server.com
    description: Production server
    protocol: kafka
    protocolVersion: 0.9.1
channels:
  orderCreated:
    publish:
      operationId: "publishOperation"
      message:
        $ref: '#/components/messages/OrderCreated'
    description: Operation that will produce an OrderCreated object
  createOrder:
    subscribe:
      operationId: "subscribeOperation"
      message:
        $ref: '#/components/messages/CreateOrder'
    description: Operation that will consume an CreateOrder object
components:
  messages:
    OrderCreated:
      payload:
        $ref: '#/components/schemas/OrderCreatedSchema'
    CreateOrder:
      payload:
        $ref: '#/components/schemas/CreateOrderSchema'
  schemas:
    CreateOrderSchema:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
    OrderCreatedSchema:
      type: object
      properties:
        order:
          $ref: '#/components/schemas/Order'
    Order:
      type: object
      properties:
        name:
          type: string
          enum: [ Corunet, Sngular ]
          example: Sngular